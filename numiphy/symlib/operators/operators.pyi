from ..symcore import *
from ..symcore import _Expr, _Singleton, _Subs, _Add, _Mul, _Pow, _Float, _Rational, _Integer, _Special, _Complex, _Symbol, _Derivative, _Integral, _ScalarField, _DummyScalarField, _Any
from typing import Type, Self, Dict, Callable
import numpy as np
from functools import cached_property
import scipy.sparse as sp
from ...findiffs import grids


class Operator(_Expr):

    S: SingletonOp

    def __add__(self, other)->Operator:...
    
    def __sub__(self, other)->Operator:...
    
    def __mul__(self, other)->Operator:...
    
    def __truediv__(self, other)->Operator:...
    
    def __pow__(self, other)->Operator:...
    
    def __neg__(self)->Operator:...
    
    def __radd__(self, other)->Operator:...
    
    def __rsub__(self, other)->Operator:...
    
    def __rmul__(self, other)->Operator:...
    
    def __rtruediv__(self, other)->Operator:...
    
    def __rpow__(self, other)->Operator:...
    
    def __abs__(self)->Operator:...

    def __repr__(self)->str:...

    def __str__(self)->str:...
    
    def __hash__(self)->int:...

    def __eq__(self, other)->bool:...

    def _diff(self, var: VariableOp)->Operator:...
    
    def _equals(self, other: Type[Self])->bool:... #other must be same class as self

    @classmethod
    def _asexpr(cls, arg)->Operator:...# also checks if it is operator or not e.g.
    
    @classmethod
    def _add(cls, *args, simplify=True)->Operator:...# return Add.init(...)

    @classmethod
    def _mul(cls, *args, simplify=True)->Operator:...

    @classmethod
    def _pow(cls, base, power, simplify=True)->Operator:...

    @classmethod
    def _sin(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _cos(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _exp(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _log(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _tan(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _abs(cls, arg: Operator, simplify=True)->Operator:...

    @classmethod
    def _rat(cls, m: int, n: int)->Operator:...##### def __new__ in Rational and RationalOp

    @classmethod
    def _derivative(cls, f: Operator, *vars: VariableOp, simplify=True)->Operator:...

    @classmethod
    def _subs(cls, expr: Operator, vals: Dict[Operator, Operator], simplify=True)->Operator:...

    @classmethod
    def _dummy(cls, arr: np.ndarray, grid: grids.Grid, *vars: VariableOp)->DummyScalarFieldOp:...

    @property
    def args(self)->tuple[Operator,...]:...

    def doit(self, deep=True)->Operator:...

    def get_ndarray(self, x: Dict[VariableOp, np.ndarray], **kwargs)->np.ndarray:...

    def ndarray(self, varorder: list[VariableOp], grid: grids.Grid, acc=1, fd='central')->np.ndarray:...

    def body(self)->Operator:...
    
    def coef(self)->Operator:...
    
    def addargs(self)->tuple[Operator,...]:...

    def mulargs(self)->tuple[Operator,...]:...

    def powargs(self)->tuple[Operator, Operator]:...

    def neg(self)->Operator:...

    def _repr_from(self, lib: str, oper: Type[Operation])->str:...

    def replace(self, items: Dict[Operator, Operator])->Operator:...

    def subs(self, vals: Dict[Operator, Operator])->Operator:...

    def diff(self, var: VariableOp, order=1)->Operator:...

    def eval(self)->Operator:...
    
    def get_grids(self, var: VariableOp)->tuple[grids.Grid1D,...]:...
    
    @cached_property
    def variables(self)->tuple[VariableOp,...]:...
    
    def expand(self)->Operator:...

    def has_diff(self)->bool:...

    @property
    def hasdiff_wrt(self)->tuple[VariableOp,...]:...

    def Expand(self)->Operator:...

    def apply(self, other)->Operator:...

    def commutes_with(self, other: Operator)->bool:...

    def init(self, *args, simplify=True)->Operator:...

    def array(self, varorder: list[VariableOp], grid: grids.Grid, acc=1, fd='central')->np.ndarray:...
    
    def integral(self, varorder: list[VariableOp], grid: grids.Grid, acc=1, fd='central')->float:...

    def dummify(self, varorder=None, grid: grids.Grid=None, acc=1, fd='central')->DummyScalarFieldOp:...

    def matrix(self, varorder: list[VariableOp], grid: grids.Grid, acc=1, fd='central')->sp.csr_matrix:...

    def plot(self, varorder: list[VariableOp], grid: grids.Grid, acc=1, fd='central', ax=None, **kwargs):...
    
    def animate(self, var: VariableOp, varorder: list[VariableOp], duration: float, save: str, grid: grids.Grid, display = True, **kwargs):...


class AddOp(Operator, _Add):

    def __new__(cls, *args, simplify=True)->Operator:...

class MulOp(Operator, _Mul):

    def __new__(cls, *args, simplify=True)->Operator:...

class PowOp(Operator, _Pow):

    def __new__(cls, base, power, simplify=True)->Operator:...


class FloatOp(Operator, _Float):...


class RationalOp(Operator, _Rational):

    def __new__(cls, m: int, n: int)->Operator:...

class IntegerOp(Operator, _Integer):

    def __new__(cls, m)->Operator:...


class SpecialOp(Operator, _Special):...


class ComplexOp(Operator, _Complex):...


class VariableOp(Operator, _Symbol):

    def __init__(self, name: str, axis: int):...

    @property
    def axis(self)->int:...


class SubsOp(Operator, _Subs):

    def __new__(cls, expr: Operator, vals: Dict[VariableOp, Operator], simplify=True)->Operator:...

    @property
    def expr(self)->Operator:...

    @property
    def vals(self)->Dict[VariableOp, Operator]:...


class DerivOp(Operator, _Derivative):

    def __new__(cls, f: Operator, *vars: VariableOp, simplify=True)->Operator:...

    @property
    def f(self)->Operator:...
    
    @cached_property
    def symbols(self)->tuple[VariableOp, ...]:...

    @cached_property
    def diffcount(self)->Dict[VariableOp, int]:...


class Diff(Operator, Atom):

    def __new__(cls, var: VariableOp, order=1)->Operator:...

    @property
    def symbol(self)->VariableOp:...
    
    @property
    def order(self)->int:...


class ScalarFieldOp(Operator, _ScalarField):

    @property
    def _variables(self)->tuple[VariableOp,...]:...


class DummyScalarFieldOp(Operator, _DummyScalarField):...


class SingletonOp(_Singleton):
    One: IntegerOp
    Zero: IntegerOp
    I: ComplexOp
    pi: SpecialOp


class AnyOp(Operator, _Any):...